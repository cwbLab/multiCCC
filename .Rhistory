test.exp <- readRDS('C:\\Users\\Administrator\\Desktop\\exp.mouse.rds')
test.meta <- readRDS('C:\\Users\\Administrator\\Desktop\\meta_data.mouse.rds')
table( test.meta$celltype )
View(test.meta)
test.data <- list( exp = test.exp , meta = test.meta )
library(usethis)
usethis::use_data( test.data, overwrite = TRUE )
data( 'mutliCCC.human.lr.rda' )
data( 'mutliCCC.human.lr' )
?data
mydata <- get("mutliCCC.human.lr", envir = asNamespace("datasets"))
mydata <- get("mutliCCC.human.lr", envir = asNamespace("multiCCC"))
#' @param threads The number of threads used for parallel computation.
#'
#' @returns A list object.
#' @examples
#'
#' data( 'test.data' )
#'
#'
#'
#' @export
comm_score <- function( exp,meta.data,sample,celltype,
LR.species = 'human', LR.source = 'CCI', LR.method = 'CCI',
min.cell = 10, min.exp = 0.1, min.prob = 0.3,
threads = NULL
){
###
library(dplyr)
library(pbmcapply)
library(data.table)
library(stringr)
library(parallel)
library(SingleCellExperiment)
###threads
if( is.null(threads) ){  threads <- parallel::detectCores()   }
###LR.source
if(  is.data.frame( LR.source ) ){
lr.database <- LR.source
colnames( lr.database ) <- c(  'ligand' , 'receptor'  )
}else{
lr.database <- get_database( species = LR.species , source = LR.source  )
}
lr.genes <- unique(  lr.database$ligand , lr.database$receptor  ) %>% unique()
###exp,meta.data
exp <- exp[,  colnames(exp) %in% lr.genes   ]
if( !identical( rownames(exp), rownames(meta.data) ) ){
stop( simpleError( 'Mismatch between row names of exp and meta.data.'  ) )
}
###detect
message( Sys.time() , '\n','Checking the expression profiles of ligands and receptors.'  )
samples <-  meta.data %>% pull(sample) %>% unique() %>% as.character()
celltypes <-  meta.data %>% pull( celltype  ) %>% unique() %>% as.character()
detect_exp <- pbmclapply( colnames(exp) ,function(gene){
level1 <-  lapply(samples, function(m){
level2 <- lapply(celltypes, function(n){
ds <- exp[  meta.data[[sample]] == m & meta.data[[celltype]] == n   ,  gene  ]
#
my.return='N'
prob = length(which(ds <= min.exp)) / length(ds)
if( length(ds) >= min.cell &  prob >= min.prob   ){
my.return = 'Y'
}
#
return(  data.table( matrix( c(sample = m , celltype = n ,
gene = gene , prob = prob , reserved = my.return ) ,
nrow =1 )   )   )
#
}) %>% rbindlist()
}) %>% rbindlist()
}, mc.cores = threads   ) %>% rbindlist()
colnames( detect_exp ) <- c( 'sample' , 'celltype', 'gene', 'prob' ,'reserved'   )
###LRscore
message( Sys.time() , '\n','Calculating communication strength score (LRscore).'  )
if ( LR.method == 'CCI'  ){
ccc.res <- cci_lrscore( exp = exp , meta.data = meta.data, sample =  sample , celltype =  celltype,
lr.database =lr.database , detect_exp = detect_exp , threads = threads )
}else{
ccc.res <- liana_lrscore( exp = exp , meta.data = meta.data, sample =  sample , celltype =  celltype,
lr.database =lr.database , LR.species = LR.species,
min.cell = min.cell  , min.prob = min.prob , threads = threads )
}
###output
return( list(
CCC.info = ccc.res$CCC.info,
LRscore = ccc.res$LRscore,
parameters = list(
exp = exp ,meta.data = meta.data ,sample = sample,celltype = celltype,
LR.species = LR.species, LR.source = LR.source, LR.method = LR.method,
min.cell = min.cell, min.exp = min.exp, min.prob = min.prob,
threads = threads
)
) )
}
a <- comm_score( exp = t(  test.data$exp )  , meta.data = test.data$exp , sample = 'orig.ident' , celltype = 'final.anno2' )
colnames(test.data$meta)
use_r("multiCCC")
?p.adjust
test.meta[1:5,]
use_r("plot")
document()
library(devtools)
library(usethis)
document()
document()
use_mit_license()
use_mit_license()
use_package(package =c('dplyr' , 'data.table' ))
use_package(package = 'dplyr' ))
use_package(package = 'dplyr' )
use_readme_rmd()
install()
library(data.table)
install()
install.packages("pkgbuild")
pkgbuild::check_rtools()
build()
library(devtools)
build()
build()
library( multiCCC )
library(multiCCC)
library(multiCCC)
?lr_score
data( 'test.data' )
LRscore <- lr_score( exp = t( test.data$exp ) ,
meta.data = test.data$meta ,
LR.species = 'mouse' ,
sample = 'orig.ident' ,
celltype = 'celltype' )
data( 'test.data' )
LRscore <- lr_score( exp = t( test.data$exp ) ,
meta.data = test.data$meta ,
LR.species = 'mouse' ,
sample = 'orig.ident' ,
celltype = 'celltype',threads = 1
)
###
suppressMessages(
library(dplyr)
library(pbmcapply)
###
suppressMessages(
library(dplyr)
library(pbmcapply)
###
suppressMessages({
library(dplyr)
library(pbmcapply)
library(data.table)
library(stringr)
library(parallel)
library(SingleCellExperiment)
})
